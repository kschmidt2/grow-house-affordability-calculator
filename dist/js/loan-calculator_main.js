var calculator=new Vue({el:"#calculator",data:{amount:"10,000",frequency:1,term:7,interestRate:3,totalPaid:"",totalInterest:"",monthlyPayment:"",payoffDate:"",tenPayment:"",tenSave:"",tenPayoff:"",twentyfivePayment:"",twentyfiveSave:"",twentyfivePayoff:""},watch:{amount:function(t){const e=t.replace(/\D/g,"").replace(/\B(?=(\d{3})+(?!\d))/g,",");Vue.nextTick(()=>this.amount=e)}},methods:{getResults:function(){let t,e,a,n,o,l,s,h,m,r,u,c,g,y=parseInt(this.amount.replace(/,/g,""),10),f=this.interestRate/100/12,d=this.term,v=[],P=[],D=[],w=y,p=2;s=(new Date).getFullYear(),1==this.frequency&&(d*=12),a=(t=Math.pow(1+f,d)-1)/(e=f*Math.pow(1+f,d)),this.monthlyPayment=y/a,this.totalPaid=this.monthlyPayment*d,this.totalInterest=this.totalPaid-y;const F=["January","February","March","April","May","June","July","August","September","October","November","December"];for(n=new Date,l=F[(o=new Date(n.setMonth(n.getMonth()+d))).getMonth()],s=o.getFullYear(),this.payoffDate=l+" "+s,v.push(y),i=0;i<d;i++)w=w*f+w-this.monthlyPayment,v.push(w),(P=v.filter((t,e)=>e%12==0)).pop(),P.push(0);for(console.log(P),n=new Date,i=0;i<P.length;i++)s=n.getFullYear(),l=n.getMonth()+1,catYear=i+s,g=l+"/"+(g=catYear.toString().substr(-2)),D.push(g);console.log(D),(h=document.getElementById("calculator").offsetWidth)<400?P.length>22?p=10:P.length>=14&&P.length<22?p=5:P.length<7&&(p=1):P.length<12?p=1:P.length>21&&(p=5),this.drawChart(P,D,p),this.tenPayment=1.1*this.monthlyPayment,m=-1*Math.log(1-f*y/this.tenPayment)/Math.log(1+f),n=new Date,fullPayoffDate10=new Date(n.setMonth(n.getMonth()+m+1)),l=F[fullPayoffDate10.getMonth()],s=fullPayoffDate10.getFullYear(),this.tenPayoff=l+" "+s,u=this.tenPayment*m-y,this.tenSave=this.totalInterest-u,this.twentyfivePayment=1.25*this.monthlyPayment,r=-1*Math.log(1-f*y/this.twentyfivePayment)/Math.log(1+f),n=new Date,fullPayoffDate25=new Date(n.setMonth(n.getMonth()+r+1)),l=F[fullPayoffDate25.getMonth()],s=fullPayoffDate25.getFullYear(),this.twentyfivePayoff=l+" "+s,c=this.twentyfivePayment*r-y,this.twentyfiveSave=this.totalInterest-c,this.monthlyPayment=this.monthlyPayment.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.totalPaid=this.totalPaid.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.totalInterest=this.totalInterest.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.tenPayment=this.tenPayment.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.tenSave=this.tenSave.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.twentyfivePayment=this.twentyfivePayment.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.twentyfiveSave=this.twentyfiveSave.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2})},drawChart:function(t,e,i){function a(){Highcharts.chart("chart-container-loancalc",{chart:{type:"column",styledMode:!0,spacingBottom:0,spacingRight:20,spacingLeft:0,animation:!1},title:{text:null},series:[{name:"Loan balance",data:t}],plotOptions:{series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{style:{textOverflow:"none"},autoRotation:0},categories:e,tickLength:5,tickInterval:i},yAxis:{title:!1,labels:{overflow:"allow",formatter:function(){return"$"+Highcharts.numberFormat(this.value,0,".",",")}},tickAmount:5},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,shared:!0,valuePrefix:"$",valueDecimals:2}})}Highcharts.setOptions({lang:{thousandsSep:",",numericSymbols:[null,"M","G","T","P","E"]}}),"complete"===document.readyState||"interactive"===document.readyState?a():document.addEventListener("DOMContentLoaded",a)}},mounted:function(){this.getResults()}});function limitNumber(){this.value.length>this.maxLength&&(this.value=this.value.slice(0,this.maxLength),type="number",maxlength="2")}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
