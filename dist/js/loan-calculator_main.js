var calculator=new Vue({el:"#calculator",data:{amount:"10,000",frequency:1,term:7,interestRate:3,totalPaid:"",totalInterest:"",monthlyPayment:"",payoffDate:"",headerString:"",tenPayment:"",tenSave:"",tenPayoff:"",twentyfivePayment:"",twentyfiveSave:"",twentyfivePayoff:""},watch:{amount:function(t){const e=t.replace(/\D/g,"").replace(/\B(?=(\d{3})+(?!\d))/g,",");Vue.nextTick(()=>this.amount=e)}},methods:{getResults:function(){let t,e,a,n,o,s,l,r,h,m,u,c,g,y,f,d=parseInt(this.amount.replace(/,/g,""),10),v=this.interestRate/100/12,P=this.term,p=[],D=[],b=[],w=d,M=2;l=(new Date).getFullYear(),1==this.frequency&&(P*=12),a=(t=Math.pow(1+v,P)-1)/(e=v*Math.pow(1+v,P)),this.monthlyPayment=d/a,this.totalPaid=this.monthlyPayment*P,this.totalInterest=this.totalPaid-d;const S=["January","February","March","April","May","June","July","August","September","October","November","December"];for(n=new Date,o=new Date(n.setMonth(n.getMonth()+P)),this.payoffMonth=S[o.getMonth()],l=o.getFullYear(),this.payoffDate=this.payoffMonth+" "+l,p.push(d),i=0;i<P;i++)w=w*v+w-this.monthlyPayment,p.push(w),D=P>24?p.filter((t,e)=>e%12==0):p;for(D.pop(),D.push(0),n=new Date,i=0;i<D.length;i++)r=l=n.getFullYear(),"January"!=(h=S[s=n.getMonth()])&&"February"!=h&&"March"!=h&&"April"!=h&&"August"!=h&&"September"!=h&&"October"!=h&&"November"!=h&&"December"!=h||(h=h.substring(0,3)+"."),P>24?(f=" '"+(f=(r=i+l).toString().substr(-2)),b.push(f)):((f=i+s)>11&&f<=23?(f-=12,r=l+1):f>23&&(f-=24,r=l+2),"January"!=(h=S[f])&&"February"!=h&&"March"!=h&&"April"!=h&&"August"!=h&&"September"!=h&&"October"!=h&&"November"!=h&&"December"!=h||(h=h.substring(0,3)+"."),f=h+" '"+r.toString().substr(-2),b.push(f));this.headerString=P>24?"Loan balance in "+h+" of each year":"Monthly loan balance",(m=document.getElementById("calculator").offsetWidth)<400?D.length>=22?M=10:D.length>=12&&D.length<22?M=5:D.length<7&&(M=1):D.length<12?M=1:D.length>17&&(M=5),this.drawChart(D,b,M),this.tenPayment=1.1*this.monthlyPayment,u=-1*Math.log(1-v*d/this.tenPayment)/Math.log(1+v),n=new Date,fullPayoffDate10=new Date(n.setMonth(n.getMonth()+u+1)),s=S[fullPayoffDate10.getMonth()],l=fullPayoffDate10.getFullYear(),this.tenPayoff=s+" "+l,g=this.tenPayment*u-d,this.tenSave=this.totalInterest-g,this.twentyfivePayment=1.25*this.monthlyPayment,c=-1*Math.log(1-v*d/this.twentyfivePayment)/Math.log(1+v),n=new Date,fullPayoffDate25=new Date(n.setMonth(n.getMonth()+c+1)),s=S[fullPayoffDate25.getMonth()],l=fullPayoffDate25.getFullYear(),this.twentyfivePayoff=s+" "+l,y=this.twentyfivePayment*c-d,this.twentyfiveSave=this.totalInterest-y,this.monthlyPayment=this.monthlyPayment.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.totalPaid=this.totalPaid.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.totalInterest=this.totalInterest.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.tenPayment=this.tenPayment.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.tenSave=this.tenSave.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.twentyfivePayment=this.twentyfivePayment.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.twentyfiveSave=this.twentyfiveSave.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2})},drawChart:function(t,e,a){function i(){Highcharts.chart("chart-container-loancalc",{chart:{type:"column",styledMode:!0,spacingBottom:0,spacingRight:0,spacingLeft:0,animation:!1},title:{text:null},series:[{name:"Loan balance",data:t}],plotOptions:{series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{style:{textOverflow:"none"},autoRotation:0},categories:e,tickLength:5,tickInterval:a},yAxis:{title:!1,labels:{overflow:"allow",formatter:function(){return"$"+Highcharts.numberFormat(this.value,0,".",",")}},tickAmount:5},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,shared:!0,valuePrefix:"$",valueDecimals:2}})}Highcharts.setOptions({lang:{thousandsSep:",",numericSymbols:[null,"M","G","T","P","E"]}}),"complete"===document.readyState||"interactive"===document.readyState?i():document.addEventListener("DOMContentLoaded",i)}},mounted:function(){this.getResults()}});function limitNumber(){this.value.length>this.maxLength&&(this.value=this.value.slice(0,this.maxLength),type="number",maxlength="2")}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
