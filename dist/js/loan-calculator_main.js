var calculator=new Vue({el:"#calculator",data:{amount:"10,000",frequency:1,term:7,interestRate:3,totalPaid:"",totalInterest:"",monthlyPayment:"",payoffDate:"",tenPayment:"",tenSave:"",tenPayoff:"",twentyfivePayment:"",twentyfiveSave:"",twentyfivePayoff:""},watch:{amount:function(t){const e=t.replace(/\D/g,"").replace(/\B(?=(\d{3})+(?!\d))/g,",");Vue.nextTick(()=>this.amount=e)}},methods:{getResults:function(){let t,e,i,a,n,o,s,m,l,h,y,r=parseInt(this.amount.replace(/,/g,""),10),u=this.interestRate/100/12,f=this.term;s=(new Date).getFullYear(),1==this.frequency&&(f*=12),i=(t=Math.pow(1+u,f)-1)/(e=u*Math.pow(1+u,f)),console.log(i),this.monthlyPayment=r/i,this.totalPaid=this.monthlyPayment*f,this.totalInterest=this.totalPaid-r;const g=["January","February","March","April","May","June","July","August","September","October","November","December"];a=new Date,o=g[(n=new Date(a.setMonth(a.getMonth()+f))).getMonth()],s=n.getFullYear(),this.payoffDate=o+" "+s,this.tenPayment=1.1*this.monthlyPayment,m=-1*Math.log(1-u*r/this.tenPayment)/Math.log(1+u),a=new Date,console.log(a),fullPayoffDate10=new Date(a.setMonth(a.getMonth()+m+1)),o=g[fullPayoffDate10.getMonth()],s=fullPayoffDate10.getFullYear(),this.tenPayoff=o+" "+s,h=this.tenPayment*m-r,this.tenSave=this.totalInterest-h,this.twentyfivePayment=1.25*this.monthlyPayment,l=-1*Math.log(1-u*r/this.twentyfivePayment)/Math.log(1+u),a=new Date,console.log(a),fullPayoffDate25=new Date(a.setMonth(a.getMonth()+l+1)),o=g[fullPayoffDate25.getMonth()],s=fullPayoffDate25.getFullYear(),console.log(l),console.log(fullPayoffDate25),this.twentyfivePayoff=o+" "+s,y=this.twentyfivePayment*l-r,this.twentyfiveSave=this.totalInterest-y,console.log(y),this.monthlyPayment=this.monthlyPayment.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.totalPaid=this.totalPaid.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.totalInterest=this.totalInterest.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.tenPayment=this.tenPayment.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.tenSave=this.tenSave.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.twentyfivePayment=this.twentyfivePayment.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2}),this.twentyfiveSave=this.twentyfiveSave.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2})}},mounted:function(){this.getResults()}});function limitNumber(){this.value.length>this.maxLength&&(this.value=this.value.slice(0,this.maxLength),type="number",maxlength="2")}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
