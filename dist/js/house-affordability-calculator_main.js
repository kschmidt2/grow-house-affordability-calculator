var calculator=new Vue({el:"#calculator",data:{income:"50,000",monthly_debts:"1,000",down_payment:"20,000",credit_score:"",state:"",options:[{state:"United States",tax_rate:"0.0103"},{state:"Alabama",tax_rate:"0.0037"},{state:"Alaska",tax_rate:"0.0098"},{state:"Arizona",tax_rate:"0.0060"},{state:"Arkansas",tax_rate:"0.0061"},{state:"California",tax_rate:"0.0070"},{state:"Colorado",tax_rate:"0.0052"},{state:"Connecticut",tax_rate:"0.0173"},{state:"Delaware",tax_rate:"0.0059"},{state:"Florida",tax_rate:"0.0086"},{state:"Georgia",tax_rate:"0.0087"},{state:"Hawaii",tax_rate:"0.0031"},{state:"Idaho",tax_rate:"0.0065"},{state:"Illinois",tax_rate:"0.0197"},{state:"Indiana",tax_rate:"0.0081"},{state:"Iowa",tax_rate:"0.0143"},{state:"Kansas",tax_rate:"0.0128"},{state:"Kentucky",tax_rate:"0.0078"},{state:"Louisiana",tax_rate:"0.0051"},{state:"Maine",tax_rate:"0.0120"},{state:"Maryland",tax_rate:"0.0101"},{state:"Massachusetts",tax_rate:"0.0108"},{state:"Michigan",tax_rate:"0.0131"},{state:"Minnesota",tax_rate:"0.0105"},{state:"Mississippi",tax_rate:"0.0063"},{state:"Missouri",tax_rate:"0.0096"},{state:"Montana",tax_rate:"0.0074"},{state:"Nebraska",tax_rate:"0.0154"},{state:"Nevada",tax_rate:"0.0056"},{state:"New Hampshire",tax_rate:"0.0189"},{state:"New Jersey",tax_rate:"0.0213"},{state:"New Mexico",tax_rate:"0.0059"},{state:"New York",tax_rate:"0.0130"},{state:"North Carolina",tax_rate:"0.0078"},{state:"North Dakota",tax_rate:"0.0088"},{state:"Ohio",tax_rate:"0.0152"},{state:"Oklahoma",tax_rate:"0.0083"},{state:"Oregon",tax_rate:"0.0091"},{state:"Pennsylvania",tax_rate:"0.0143"},{state:"Rhode Island",tax_rate:"0.0137"},{state:"South Carolina",tax_rate:"0.0053"},{state:"South Dakota",tax_rate:"0.0114"},{state:"Tennessee",tax_rate:"0.0063"},{state:"Texas",tax_rate:"0.0160"},{state:"Utah",tax_rate:"0.0056"},{state:"Vermont",tax_rate:"0.0176"},{state:"Virginia",tax_rate:"0.0084"},{state:"Washington",tax_rate:"0.0084"},{state:"West Virginia",tax_rate:"0.0053"},{state:"Wisconsin",tax_rate:"0.0153"},{state:"Wyoming",tax_rate:"0.0051"},{state:"District of Columbia",tax_rate:"0.0058"}],credit_options:[{score:"760-850",tax_rate:"0.02495"},{score:"700-759",tax_rate:"0.02717"},{score:"680-699",tax_rate:"0.02894"},{score:"660-679",tax_rate:"0.03108"},{score:"640-659",tax_rate:"0.03538"},{score:"620-639",tax_rate:"0.04084"}]},watch:{income:function(t){const a=t.replace(/\D/g,"").replace(/\B(?=(\d{3})+(?!\d))/g,",");Vue.nextTick(()=>this.income=a)},monthlyDebts:function(t){const a=t.replace(/\D/g,"").replace(/\B(?=(\d{3})+(?!\d))/g,",");Vue.nextTick(()=>this.monthlyDebts=a)},downPayment:function(t){const a=t.replace(/\D/g,"").replace(/\B(?=(\d{3})+(?!\d))/g,",");Vue.nextTick(()=>this.downPayment=a)}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
